// <auto-generated />
using InteractiveStand.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InteractiveStand.Infrastructure.Migrations
{
    [DbContext(typeof(RegionDbContext))]
    [Migration("20250618162314_NewProperty")]
    partial class NewProperty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InteractiveStand.Domain.Classes.ConnectedRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("ReceivedFirstCategoryCapacity")
                        .HasColumnType("double precision");

                    b.Property<double>("ReceivedRemainingCapacity")
                        .HasColumnType("double precision");

                    b.Property<int>("RegionDestinationId")
                        .HasColumnType("integer");

                    b.Property<int>("RegionSourceId")
                        .HasColumnType("integer");

                    b.Property<double>("SentFirstCategoryCapacity")
                        .HasColumnType("double precision");

                    b.Property<double>("SentRemainingCapacity")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("RegionDestinationId");

                    b.HasIndex("RegionSourceId");

                    b.ToTable("ConnectedRegions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 2,
                            RegionSourceId = 1,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 2,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 5,
                            RegionSourceId = 1,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 3,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 8,
                            RegionSourceId = 1,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 4,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 1,
                            RegionSourceId = 2,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 5,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 3,
                            RegionSourceId = 2,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 6,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 4,
                            RegionSourceId = 2,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 7,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 5,
                            RegionSourceId = 2,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 8,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 2,
                            RegionSourceId = 3,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 9,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 4,
                            RegionSourceId = 3,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 10,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 2,
                            RegionSourceId = 4,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 11,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 3,
                            RegionSourceId = 4,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 12,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 5,
                            RegionSourceId = 4,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 13,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 10,
                            RegionSourceId = 4,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 14,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 1,
                            RegionSourceId = 5,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 15,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 2,
                            RegionSourceId = 5,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 16,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 4,
                            RegionSourceId = 5,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 17,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 6,
                            RegionSourceId = 5,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 18,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 5,
                            RegionSourceId = 6,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 19,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 7,
                            RegionSourceId = 6,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 20,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 9,
                            RegionSourceId = 6,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 21,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 6,
                            RegionSourceId = 7,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 22,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 1,
                            RegionSourceId = 8,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 23,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 6,
                            RegionSourceId = 9,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        },
                        new
                        {
                            Id = 24,
                            ReceivedFirstCategoryCapacity = 0.0,
                            ReceivedRemainingCapacity = 0.0,
                            RegionDestinationId = 4,
                            RegionSourceId = 10,
                            SentFirstCategoryCapacity = 0.0,
                            SentRemainingCapacity = 0.0
                        });
                });

            modelBuilder.Entity("InteractiveStand.Domain.Classes.Consumer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("FirstPercentage")
                        .HasColumnType("double precision");

                    b.Property<double>("SecondPercentage")
                        .HasColumnType("double precision");

                    b.Property<double>("ThirdPercentage")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Consumers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstPercentage = 30.0,
                            SecondPercentage = 20.0,
                            ThirdPercentage = 50.0
                        },
                        new
                        {
                            Id = 2,
                            FirstPercentage = 40.0,
                            SecondPercentage = 20.0,
                            ThirdPercentage = 40.0
                        },
                        new
                        {
                            Id = 3,
                            FirstPercentage = 5.0,
                            SecondPercentage = 25.0,
                            ThirdPercentage = 70.0
                        },
                        new
                        {
                            Id = 4,
                            FirstPercentage = 20.0,
                            SecondPercentage = 10.0,
                            ThirdPercentage = 70.0
                        },
                        new
                        {
                            Id = 5,
                            FirstPercentage = 20.0,
                            SecondPercentage = 20.0,
                            ThirdPercentage = 60.0
                        },
                        new
                        {
                            Id = 6,
                            FirstPercentage = 60.0,
                            SecondPercentage = 20.0,
                            ThirdPercentage = 20.0
                        },
                        new
                        {
                            Id = 7,
                            FirstPercentage = 20.0,
                            SecondPercentage = 50.0,
                            ThirdPercentage = 30.0
                        },
                        new
                        {
                            Id = 8,
                            FirstPercentage = 30.0,
                            SecondPercentage = 20.0,
                            ThirdPercentage = 50.0
                        },
                        new
                        {
                            Id = 9,
                            FirstPercentage = 70.0,
                            SecondPercentage = 10.0,
                            ThirdPercentage = 20.0
                        },
                        new
                        {
                            Id = 10,
                            FirstPercentage = 30.0,
                            SecondPercentage = 20.0,
                            ThirdPercentage = 50.0
                        });
                });

            modelBuilder.Entity("InteractiveStand.Domain.Classes.PowerSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("AESPercentage")
                        .HasColumnType("double precision");

                    b.Property<double>("GESPercentage")
                        .HasColumnType("double precision");

                    b.Property<double>("SESPercentage")
                        .HasColumnType("double precision");

                    b.Property<double>("TESPercentage")
                        .HasColumnType("double precision");

                    b.Property<double>("VESPercentage")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("PowerSources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AESPercentage = 25.0,
                            GESPercentage = 4.0,
                            SESPercentage = 0.0,
                            TESPercentage = 71.0,
                            VESPercentage = 0.0
                        },
                        new
                        {
                            Id = 2,
                            AESPercentage = 15.0,
                            GESPercentage = 25.0,
                            SESPercentage = 0.69999999999999996,
                            TESPercentage = 59.0,
                            VESPercentage = 0.29999999999999999
                        },
                        new
                        {
                            Id = 3,
                            AESPercentage = 3.0,
                            GESPercentage = 4.0,
                            SESPercentage = 1.0,
                            TESPercentage = 92.0,
                            VESPercentage = 0.0
                        },
                        new
                        {
                            Id = 4,
                            AESPercentage = 24.0,
                            GESPercentage = 12.0,
                            SESPercentage = 0.0,
                            TESPercentage = 63.0,
                            VESPercentage = 1.0
                        },
                        new
                        {
                            Id = 5,
                            AESPercentage = 23.0,
                            GESPercentage = 15.0,
                            SESPercentage = 4.0,
                            TESPercentage = 50.0,
                            VESPercentage = 8.0
                        },
                        new
                        {
                            Id = 6,
                            AESPercentage = 0.0,
                            GESPercentage = 48.0,
                            SESPercentage = 1.0,
                            TESPercentage = 51.0,
                            VESPercentage = 0.0
                        },
                        new
                        {
                            Id = 7,
                            AESPercentage = 0.0,
                            GESPercentage = 41.0,
                            SESPercentage = 0.0,
                            TESPercentage = 59.0,
                            VESPercentage = 0.0
                        },
                        new
                        {
                            Id = 8,
                            AESPercentage = 2.0,
                            GESPercentage = 48.0,
                            SESPercentage = 0.0,
                            TESPercentage = 50.0,
                            VESPercentage = 0.0
                        },
                        new
                        {
                            Id = 9,
                            AESPercentage = 0.0,
                            GESPercentage = 0.0,
                            SESPercentage = 50.0,
                            TESPercentage = 50.0,
                            VESPercentage = 0.0
                        },
                        new
                        {
                            Id = 10,
                            AESPercentage = 0.0,
                            GESPercentage = 0.0,
                            SESPercentage = 0.0,
                            TESPercentage = 0.0,
                            VESPercentage = 100.0
                        });
                });

            modelBuilder.Entity("InteractiveStand.Domain.Classes.PowerTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("SentCapacity")
                        .HasColumnType("double precision");

                    b.Property<int>("WhoReceivedId")
                        .HasColumnType("integer");

                    b.Property<int>("WhoSentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WhoReceivedId");

                    b.HasIndex("WhoSentId");

                    b.ToTable("PowerTransfers");
                });

            modelBuilder.Entity("InteractiveStand.Domain.Classes.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("ConsumedCapacity")
                        .HasColumnType("double precision");

                    b.Property<int>("ConsumerId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PowerSourceId")
                        .HasColumnType("integer");

                    b.Property<double>("ProducedCapacity")
                        .HasColumnType("double precision");

                    b.Property<int>("TimeZoneOffset")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerId")
                        .IsUnique();

                    b.HasIndex("PowerSourceId")
                        .IsUnique();

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsumedCapacity = 100.0,
                            ConsumerId = 1,
                            Name = "ОЭС 1",
                            PowerSourceId = 1,
                            ProducedCapacity = 23.0,
                            TimeZoneOffset = 3
                        },
                        new
                        {
                            Id = 2,
                            ConsumedCapacity = 270.0,
                            ConsumerId = 2,
                            Name = "ОЭС 2",
                            PowerSourceId = 2,
                            ProducedCapacity = 62.0,
                            TimeZoneOffset = 3
                        },
                        new
                        {
                            Id = 3,
                            ConsumedCapacity = 140.0,
                            ConsumerId = 3,
                            Name = "ОЭС 3",
                            PowerSourceId = 3,
                            ProducedCapacity = 32.0,
                            TimeZoneOffset = 3
                        },
                        new
                        {
                            Id = 4,
                            ConsumedCapacity = 120.0,
                            ConsumerId = 4,
                            Name = "ОЭС 4",
                            PowerSourceId = 4,
                            ProducedCapacity = 27.0,
                            TimeZoneOffset = 4
                        },
                        new
                        {
                            Id = 5,
                            ConsumedCapacity = 260.0,
                            ConsumerId = 5,
                            Name = "ОЭС 5",
                            PowerSourceId = 5,
                            ProducedCapacity = 60.0,
                            TimeZoneOffset = 5
                        },
                        new
                        {
                            Id = 6,
                            ConsumedCapacity = 240.0,
                            ConsumerId = 6,
                            Name = "ОЭС 6",
                            PowerSourceId = 6,
                            ProducedCapacity = 55.0,
                            TimeZoneOffset = 7
                        },
                        new
                        {
                            Id = 7,
                            ConsumedCapacity = 11.0,
                            ConsumerId = 7,
                            Name = "ОЭС 7",
                            PowerSourceId = 7,
                            ProducedCapacity = 50.0,
                            TimeZoneOffset = 10
                        },
                        new
                        {
                            Id = 8,
                            ConsumedCapacity = 3.0,
                            ConsumerId = 8,
                            Name = "АЭК-ТИТЭС",
                            PowerSourceId = 8,
                            ProducedCapacity = 15.0,
                            TimeZoneOffset = 3
                        },
                        new
                        {
                            Id = 9,
                            ConsumedCapacity = 3.0,
                            ConsumerId = 9,
                            Name = "АЭК-ПРОМ",
                            PowerSourceId = 9,
                            ProducedCapacity = 15.0,
                            TimeZoneOffset = 7
                        },
                        new
                        {
                            Id = 10,
                            ConsumedCapacity = 0.5,
                            ConsumerId = 10,
                            Name = "АЭК-ВИЭ",
                            PowerSourceId = 10,
                            ProducedCapacity = 10.0,
                            TimeZoneOffset = 4
                        });
                });

            modelBuilder.Entity("InteractiveStand.Domain.Classes.ConnectedRegion", b =>
                {
                    b.HasOne("InteractiveStand.Domain.Classes.Region", null)
                        .WithMany()
                        .HasForeignKey("RegionDestinationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InteractiveStand.Domain.Classes.Region", null)
                        .WithMany()
                        .HasForeignKey("RegionSourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("InteractiveStand.Domain.Classes.PowerTransfer", b =>
                {
                    b.HasOne("InteractiveStand.Domain.Classes.Region", null)
                        .WithMany()
                        .HasForeignKey("WhoReceivedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InteractiveStand.Domain.Classes.Region", null)
                        .WithMany()
                        .HasForeignKey("WhoSentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("InteractiveStand.Domain.Classes.Region", b =>
                {
                    b.HasOne("InteractiveStand.Domain.Classes.Consumer", "Consumer")
                        .WithOne()
                        .HasForeignKey("InteractiveStand.Domain.Classes.Region", "ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InteractiveStand.Domain.Classes.PowerSource", "PowerSource")
                        .WithOne()
                        .HasForeignKey("InteractiveStand.Domain.Classes.Region", "PowerSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumer");

                    b.Navigation("PowerSource");
                });
#pragma warning restore 612, 618
        }
    }
}
